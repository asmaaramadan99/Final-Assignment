package FinalAssignment;

import dataStructures.Stack;
import interfaces.IMiscUtils;

public class MiscUtils implements IMiscUtils {
	
	
	public void traverse(BinaryTreeNode root)
	{
		if(root==null)
	     	return;
		traverse(root.left);
		System.out.println(root.element);
		traverse(root.right);	
	}
	
	

	@Override
	public BinaryTreeNode insert(BinaryTreeNode root, int element) {
		// TODO Auto-generated method stub
		
		if(root==null)
		{
		    root=new BinaryTreeNode(element);
		    return root;
		    
		}
		else if(element<(int)root.element)
		{
			root.left=insert(root.left,element);
		}
		else if(element>(int)root.element)
		{
			root.right=insert(root.right,element);
		}
		return root;
	}
	
	public BinaryTreeNode search(BinaryTreeNode root,int key)
	{
		if((int)root.element==key)
			return root;
		else if(key<(int)root.element)
			return search(root.left,key);
		else if(key>(int)root.element)
			return search(root.right,key);
			return null;
	
		
	}

	@Override
	public int sumRange(BinaryTreeNode root, int low, int high) {
		// TODO Auto-generated method stub
		if(root==null) return 0;
		if((int)root.element<low)
			return sumRange(root.right,low,high);
		if((int)root.element>high)
			return sumRange(root.left,low,high);
	
		return (int)root.element+sumRange(root.left,low,high)+sumRange(root.right,low,high);
		
		
	}

	@Override
	public boolean isValidBST(BinaryTreeNode root) {
		// TODO Auto-generated method stub
		   
		  
		if(root==null) return true;
		if((root.left!=null&&(int)root.element<getMax(root.left)) || (root.right!=null&&(int)root.element>getMin(root.right)))
			return false;
		
		if( isValidBST(root.left)&&isValidBST(root.right))
			return true;
		    return false;   
		   
	}
	
	
	public int getMin(BinaryTreeNode root)
	{
		if(root.left==null)
		return (int) root.element;
		
		
	    return getMin(root.left);
				
	}
	public int getMax(BinaryTreeNode root)
	{
		if(root.right==null)
			return (int)root.element;
		
		return getMax(root.right);		
			
	}
	

	@Override
	public int[] nextSmallerNumber(int[] array) {
		// TODO Auto-generated method stub
		int []arrayNew =new int[array.length];
		Stack stack=new Stack();
		int i=1;
		stack.push(0);
		boolean found=false;
		for( i=1;i<array.length;i++) {
	    while(true)
	    {   
	    	if(array[(int)stack.peek()+1]<array[(int)stack.peek()]) {
	    		found=true;
	    		  break;
	    	}
	        else 
	        {   if((int)stack.peek()+1>array.length) break;
	        else {
	        	stack.push((int)stack.peek()+1);
	        	
	        }
	        }
	    }
	    if(found)
	    	arrayNew[i-1]=array[(int)stack.peek()+1];
	    else
	    	arrayNew[i]=-1;
	     stack=new Stack();
	    	
		}
		
		
		 
	    
	    
		
		
		
		return arrayNew;
	}

}
