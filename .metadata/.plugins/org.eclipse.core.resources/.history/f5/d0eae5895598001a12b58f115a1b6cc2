package FinalAssignment;

import dataStructures.Stack;
import interfaces.IMiscUtils;

public class MiscUtils implements IMiscUtils {
	
	
	public void traverse(BinaryTreeNode root)
	{
		if(root==null)
	     	return;
		traverse(root.left);
		System.out.println(root.element);
		traverse(root.right);	
	}
	
	

	@Override
	public BinaryTreeNode insert(BinaryTreeNode root, int element) {
		// TODO Auto-generated method stub
		
		if(root==null)
		{
		    root=new BinaryTreeNode(element);
		    
		}
		else if(element<(int)root.element)
		{
			root.left=insert(root.left,element);
		}
		else if(element>(int)root.element)
		{
			root.right=insert(root.right,element);
		}
		return root;
	}
	
	public BinaryTreeNode search(BinaryTreeNode root,int key)
	{
		if((int)root.element==key)
			return root;
		else if(key<(int)root.element)
			return search(root.left,key);
		else if(key>(int)root.element)
			return search(root.right,key);
			return null;
	
		
	}

	@Override
	public int sumRange(BinaryTreeNode root, int low, int high) {
		// TODO Auto-generated method stub
		if(root==null) return 0;
		if((int)root.element<low)
			return sumRange(root.right,low,high);
		if((int)root.element>high)
			return sumRange(root.left,low,high);
	
		return (int)root.element+sumRange(root.left,low,high)+sumRange(root.right,low,high);
		
		
	}

	@Override
	public boolean isValidBST(BinaryTreeNode root) {
		// TODO Auto-generated method stub
		   
		   if(root==null) return true;
		return false;
		   
		   
		   
	}
	public int getMin(BinaryTreeNode root)
	{
		if(root.left==null)
		return (int) root.element;
		
		
	    return getMin(root.left);
				
	}
	public BinaryTreeNode getMax(BinaryTreeNode root)
	{
		if(root.right==null)
			return root;
		
		return getMin(root.right);		
			
	}
	
	public boolean isValidNode(BinaryTreeNode root)
	{
		if(root==null) return true;
		   if(root.left==null && root.right!=null)
		   {
			   if((int)root.right.element>(int)root.element ) return true;
			   else return false;
			   
		   }
		   if(root.left!=null && root.right==null)
		   {
			   if((int)root.left.element<(int)root.element) return true;
			   else return false;   
		   }
		   if(root.left!=null && root.right!=null)
		   {
			   if(((int)root.left.element<(int)root.element)&&((int)root.right.element>(int)root.element)) return true;
			   else return false;   
		   }  
		
		return isValidBST(root.right)&&isValidBST(root.left);
	}

	@Override
	public int[] nextSmallerNumber(int[] array) {
		// TODO Auto-generated method stub
		
	     
	    
		
		
		
		return array;
	}

}
