package FinalAssignment;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import FinalAssignment.BinaryTreeNode;
import FinalAssignment.MiscUtils;

class MiscUtilsTest {
	MiscUtils obj=new MiscUtils();

    BinaryTreeNode one = new BinaryTreeNode(1);
    BinaryTreeNode two = new BinaryTreeNode(2);
    BinaryTreeNode three = new BinaryTreeNode(3);
    BinaryTreeNode four = new BinaryTreeNode(4);
    BinaryTreeNode five = new BinaryTreeNode(5);
    BinaryTreeNode six = new BinaryTreeNode(6);
    BinaryTreeNode seven = new BinaryTreeNode(7);
    BinaryTreeNode eight = new BinaryTreeNode(8);

    MiscUtilsTest(){
        five.right = eight;
        five.left = two;
        eight.left = six;
        six.right = seven;
        two.left = one;
        two.right = three;
        three.right = four;
    }
    @Test
    void main() {
    }

    @Test
    void insert() {
    	   BinaryTreeNode root = null;
    	   root=obj.insert(root,9);
    	   root=obj.insert(root,12);
    	   root=obj.insert(root,4);
    	   root=obj.insert(root,33);
    	   root=obj.insert(root,2);
    	   root=obj.insert(root,1);
    	   root=obj.insert(root,8);
    	   root=obj.insert(root,34);
    	   obj.traverse(root);
    	   System.out.println();
    	   System.out.println();
    	   System.out.println();
    	   root=null;
    	   root=obj.insert(root,9);
    	   root=obj.insert(root,12);
    	   root=obj.insert(root,4);
    	   root=obj.insert(root,33);
    	   root=obj.insert(root,2);
    	   root=obj.insert(root,2);
    	   root=obj.insert(root,8);
    	   root=obj.insert(root,8);
    	   obj.traverse(root);
    	   
    	   
    	    
        
      
    }

    @Test
    void sumRange() {
     
        assertEquals(obj.sumRange(five,3,6),18);
        assertEquals(obj.sumRange(five,-1,3),6);
        assertEquals(obj.sumRange(five,4,7),22);
        assertEquals(obj.sumRange(five,5,6),11);

        five.right = null;
        five.left = null;
        assertEquals(obj.sumRange(five,-10,10),5);
        assertEquals(obj.sumRange(five,6,10),0);
        assertEquals(obj.sumRange(five,-10,-5),0);
    }

    @Test
    void isValidBST() {
     
  
    }

    @Test
    void nextSmallerNumber() {
        int[] arr = new int[]{ 10, 9, 2, 7, 6, 1, 2 };
        
        int[] ans = new int[]{1,2,5,4,5,-1,-1};
        assertArrayEquals(ans, obj.nextSmallerNumber(arr));

        arr = new int[]{1, 2, 3 };
        ans = new int[]{-1, -1, -1};
        assertArrayEquals(ans, obj.nextSmallerNumber(arr));

        arr = new int[]{1, 2, 3 ,1};
        ans = new int[]{-1,3, 3, -1};
        assertArrayEquals(ans, obj.nextSmallerNumber(arr));
    }
}

